lines(data$Date, rolling_sd, col = "green", lwd = 1.5)
legend("topright", legend = c("Closing Price", "Rolling Mean", "Rolling SD"),
col = c("blue", "red", "green"), lty = 1, cex = 0.8)
# Perform Augmented Dickey-Fuller (ADF) test
adf_test <- adf.test(data$Close, alternative = "stationary")
print(adf_test)
# Perform first-order differencing
data$Close_diff <- diff(data$Close, differences = 1)
# Perform first-order differencing
data$Close_diff <- diff(data$Close, differences = 1)
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Check the first few rows of the data to understand the format
head(data)
# Convert 'Date' column to datetime format (including time) using mdy_hms
data$Date <- mdy_hms(data$Date)
# Check for missing values in Date
sum(is.na(data$Date))
# If there are any NA values, remove those rows
data <- data[!is.na(data$Date), ]
# View the structure of the data
str(data)
# Plot the closing price over time
ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Microsoft Stock Price Over Time",
x = "Date",
y = "Closing Price") +
theme_minimal()
# Load necessary libraries
library(tseries)
library(forecast)
# Check for stationarity using the ADF test
adf_test <- adf.test(data$Close)
adf_test
# Plot ACF and PACF
par(mfrow=c(1,2)) # Arrange two plots side by side
acf(data$Close, main = "ACF of Microsoft Stock")
pacf(data$Close, main = "PACF of Microsoft Stock")
# Load required libraries
library(tseries)
# Calculate rolling mean and standard deviation
rolling_mean <- zoo::rollmean(data$Close, k = 30, fill = NA)
rolling_sd <- zoo::rollapply(data$Close, width = 30, FUN = sd, fill = NA)
# Plot rolling statistics
plot(data$Date, data$Close, type = "l", col = "blue", lwd = 1.5,
ylab = "Closing Price", xlab = "Date",
main = "Rolling Mean & Standard Deviation")
lines(data$Date, rolling_mean, col = "red", lwd = 1.5)
lines(data$Date, rolling_sd, col = "green", lwd = 1.5)
legend("topright", legend = c("Closing Price", "Rolling Mean", "Rolling SD"),
col = c("blue", "red", "green"), lty = 1, cex = 0.8)
# Perform Augmented Dickey-Fuller (ADF) test
adf_test <- adf.test(data$Close, alternative = "stationary")
print(adf_test)
# Load required libraries
library(tseries)
# Calculate rolling mean and standard deviation
rolling_mean <- zoo::rollmean(data$Close, k = 30, fill = NA)
rolling_sd <- zoo::rollapply(data$Close, width = 30, FUN = sd, fill = NA)
# Plot rolling statistics
plot(data$Date, data$Close, type = "l", col = "blue", lwd = 1.5,
ylab = "Closing Price", xlab = "Date",
main = "Rolling Mean & Standard Deviation")
lines(data$Date, rolling_mean, col = "red", lwd = 1.5)
lines(data$Date, rolling_sd, col = "green", lwd = 1.5)
legend("topright", legend = c("Closing Price", "Rolling Mean", "Rolling SD"),
col = c("blue", "red", "green"), lty = 1, cex = 0.8)
# Perform Augmented Dickey-Fuller (ADF) test
adf_test <- adf.test(data$Close, alternative = "stationary")
print(adf_test)
# Perform first-order differencing
data$Close_diff <- diff(data$Close, differences = 1)
# Load necessary libraries
library(tseries)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
library(lubridate)
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
library(ggplot2)
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Load necessary libraries
library(tseries)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
library(lubridate)
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
library(ggplot2)
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Plot the differenced data
ggplot(data_diff, aes(x = Date[-1], y = Close_diff)) +
geom_line(color = "blue") +
labs(title = "Differenced Microsoft Stock Price Over Time",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Load necessary libraries
library(tseries)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
library(lubridate)
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
library(ggplot2)
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Plot the differenced data
ggplot(data_diff, aes(x = Date[-1], y = Close_diff)) +
geom_line(color = "blue") +
labs(title = "Differenced Microsoft Stock Price Over Time",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Load necessary libraries
library(tseries)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
library(lubridate)
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
library(ggplot2)
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Adjust the data to align Date and Close_diff correctly
data_diff$Date <- data_diff$Date[-1]  # Remove the first date from Date
# Load necessary libraries
library(tseries)
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Load necessary libraries
library(tseries)
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Load necessary libraries
library(forecast)
library(tseries)
# Load the dataset (assuming it's already prepared)
data <- read.csv("Microsoft_Stock.csv")
data$Date <- mdy_hms(data$Date)
# Convert the 'Close' column to a time series object (monthly or daily frequency)
data_ts <- ts(data$Close, frequency = 252)  # Assuming daily data (252 trading days in a year)
# Fit the ARIMA model
arima_model <- auto.arima(data_ts)
# Print the model summary
print(arima_model)
# Check residuals for randomness (no pattern)
checkresiduals(arima_model)
# Make forecasts (e.g., for the next 30 days)
forecast_horizon <- 30
forecasted_values <- forecast(arima_model, h = forecast_horizon)
# Plot the forecasts
plot(forecasted_values)
# Print the forecasted values
print(forecasted_values)
# Load necessary libraries
library(forecast)
library(tseries)
library(ggplot2)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
data$Date <- mdy_hms(data$Date)
# Fit ARIMA model (use the ARIMA(1,1,0) from previous step or refit it)
arima_model <- arima(data$Close, order = c(1, 1, 0))
# Generate forecast (let's forecast the next 10 days, for example)
forecasted_values <- forecast(arima_model, h = 10)
# Print forecasted values
print(forecasted_values)
# Plot the forecasted values
autoplot(forecasted_values) +
labs(title = "Microsoft Stock Price Forecast",
x = "Time",
y = "Forecasted Closing Price") +
theme_minimal()
# You can also extract confidence intervals from the forecasted values
forecast_conf_intervals <- forecasted_values$lower
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Check the first few rows of the data to understand the format
head(data)
# Convert 'Date' column to datetime format (including time) using mdy_hms
data$Date <- mdy_hms(data$Date)
# Check for missing values in Date
sum(is.na(data$Date))
# If there are any NA values, remove those rows
data <- data[!is.na(data$Date), ]
# View the structure of the data
str(data)
# Plot the closing price over time
ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Microsoft Stock Price Over Time",
x = "Date",
y = "Closing Price") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Check the first few rows of the data to understand the format
head(data)
# Convert 'Date' column to datetime format (including time) using mdy_hms
data$Date <- mdy_hms(data$Date)
# Check for missing values in Date
sum(is.na(data$Date))
# If there are any NA values, remove those rows
data <- data[!is.na(data$Date), ]
# View the structure of the data
str(data)
# Plot the closing price over time
ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Microsoft Stock Price Over Time",
x = "Date",
y = "Closing Price") +
theme_minimal()
# Load necessary libraries
library(tseries)
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Load necessary libraries
library(tseries)
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Convert 'Date' column to datetime format using mdy_hms from lubridate
data$Date <- mdy_hms(data$Date)
# Perform the Augmented Dickey-Fuller test on the 'Close' column
dickey_fuller_test <- adf.test(data$Close, alternative = "stationary")
# Print the results of the ADF test
print(dickey_fuller_test)
# If the p-value > 0.05, perform differencing to make the data stationary
if (dickey_fuller_test$p.value > 0.05) {
# Perform first-order differencing
data$Close_diff <- c(NA, diff(data$Close))
# Remove the first row with NA after differencing
data_diff <- na.omit(data)
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Perform the ADF test again on the differenced data
dickey_fuller_test_diff <- adf.test(data_diff$Close_diff, alternative = "stationary")
# Print the results of the ADF test on differenced data
print(dickey_fuller_test_diff)
} else {
print("The data is already stationary. No differencing required.")
}
# Plot the differenced data to visualize stationarity
ggplot(data_diff, aes(x = Date, y = Close_diff)) +
geom_line(color = "red") +
labs(title = "Differenced Microsoft Stock Closing Price",
x = "Date",
y = "Differenced Closing Price") +
theme_minimal()
# Load necessary libraries
library(forecast)
library(tseries)
# Load the dataset (assuming it's already prepared)
data <- read.csv("Microsoft_Stock.csv")
data$Date <- mdy_hms(data$Date)
# Convert the 'Close' column to a time series object (monthly or daily frequency)
data_ts <- ts(data$Close, frequency = 252)  # Assuming daily data (252 trading days in a year)
# Fit the ARIMA model
arima_model <- auto.arima(data_ts)
# Print the model summary
print(arima_model)
# Check residuals for randomness (no pattern)
checkresiduals(arima_model)
# Make forecasts (e.g., for the next 30 days)
forecast_horizon <- 30
forecasted_values <- forecast(arima_model, h = forecast_horizon)
# Plot the forecasts
plot(forecasted_values)
# Print the forecasted values
print(forecasted_values)
# Load necessary libraries
library(forecast)
library(tseries)
library(ggplot2)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
data$Date <- mdy_hms(data$Date)
# Fit ARIMA model (use the ARIMA(1,1,0) from previous step or refit it)
arima_model <- arima(data$Close, order = c(1, 1, 0))
# Generate forecast (let's forecast the next 10 days, for example)
forecasted_values <- forecast(arima_model, h = 10)
# Print forecasted values
print(forecasted_values)
# Plot the forecasted values
autoplot(forecasted_values) +
labs(title = "Microsoft Stock Price Forecast",
x = "Time",
y = "Forecasted Closing Price") +
theme_minimal()
# You can also extract confidence intervals from the forecasted values
forecast_conf_intervals <- forecasted_values$lower
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Load the dataset
data <- read.csv("Microsoft_Stock.csv")
# Check the first few rows of the data to understand the format
head(data)
# Convert 'Date' column to datetime format (including time) using mdy_hms
data$Date <- mdy_hms(data$Date)
# Check for missing values in Date
sum(is.na(data$Date))
# If there are any NA values, remove those rows
data <- data[!is.na(data$Date), ]
# View the structure of the data
str(data)
# Plot the closing price over time
ggplot(data, aes(x = Date, y = Close)) +
geom_line(color = "blue") +
labs(title = "Microsoft Stock Price Over Time",
x = "Date",
y = "Closing Price") +
theme_minimal()
